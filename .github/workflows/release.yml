name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release, e.g. "v0.0.1" (optional, will auto-increment if not provided)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Parse version from Cargo.toml
        id: cargo_version
        run: |
          CURRENT_VERSION=$(grep -m 1 "^version = " Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine release version
        id: release_version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            # Auto-increment the patch version
            MAJOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f1)
            MINOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f2)
            PATCH=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "Used auto-incremented version"
          else
            # Use provided version, strip 'v' prefix if present
            NEW_VERSION=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')

            # Version validation
            CURRENT_MAJOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f1)
            CURRENT_MINOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f2)
            CURRENT_PATCH=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f3)
            NEW_MAJOR=$(echo $NEW_VERSION | cut -d. -f1)
            NEW_MINOR=$(echo $NEW_VERSION | cut -d. -f2)
            NEW_PATCH=$(echo $NEW_VERSION | cut -d. -f3)

            if [[ $NEW_MAJOR -lt $CURRENT_MAJOR ||
                  ($NEW_MAJOR -eq $CURRENT_MAJOR && $NEW_MINOR -lt $CURRENT_MINOR) ||
                  ($NEW_MAJOR -eq $CURRENT_MAJOR && $NEW_MINOR -eq $CURRENT_MINOR && $NEW_PATCH -lt $CURRENT_PATCH) ]]; then
              echo "Error: Provided version ($NEW_VERSION) is less than current version (${{ steps.cargo_version.outputs.current_version }})"
              exit 1
            fi
            echo "Used provided version"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $NEW_VERSION"

      - name: Update Cargo.toml
        run: |
          sed -i "s/^version = \"${{ steps.cargo_version.outputs.current_version }}\"/version = \"${{ steps.release_version.outputs.new_version }}\"/" Cargo.toml
          cat Cargo.toml | grep "^version = "

      - name: Commit and push version update
        run: |
          git add Cargo.toml
          git commit -m "Bump version to ${{ steps.release_version.outputs.new_version }}"
          
          # Method 1: Using PAT directly with git command
          echo "Using PAT for pushing changes"
          git push https://${{ secrets.GH_PUSH_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        with:
          tag_name: v${{ steps.release_version.outputs.new_version }}
          release_name: Release v${{ steps.release_version.outputs.new_version }}
          draft: true
          prerelease: false

      - name: Output Release URL
        run: echo "Release URL ${{ steps.create_release.outputs.upload_url }}"
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build:
    needs: prepare-version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            extension: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            extension: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          mkdir -p release
          cp "target/${{ matrix.target }}/release/code-assistant${{ matrix.extension }}" release/
          cd release
          zip code-assistant-${{ matrix.name }}.zip "code-assistant${{ matrix.extension }}"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-version.outputs.upload_url }}
          asset_path: release/code-assistant-${{ matrix.name }}.zip
          asset_name: code-assistant-${{ matrix.name }}.zip
          asset_content_type: application/zip
