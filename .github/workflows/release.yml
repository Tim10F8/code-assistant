name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release, e.g. "v0.1.6" (optional, will auto-increment if not provided)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PUSH_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Parse version from main crate
        id: cargo_version
        run: |
          CURRENT_VERSION=$(grep -m 1 "^version = " crates/code_assistant/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine release version
        id: release_version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            # Auto-increment the patch version
            MAJOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f1)
            MINOR=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f2)
            PATCH=$(echo ${{ steps.cargo_version.outputs.current_version }} | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "Used auto-incremented version"
          else
            # Use provided version, strip 'v' prefix if present
            NEW_VERSION=$(echo "${{ github.event.inputs.version }}" | sed 's/^v//')

            # Version validation
            CURRENT_VERSION="${{ steps.cargo_version.outputs.current_version }}"

            if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
              echo "Re-releasing same version ($NEW_VERSION). Will delete existing tag/release if present."

              # Check if tag exists and delete it
              if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
                echo "Deleting existing tag v$NEW_VERSION"
                git push origin --delete "v$NEW_VERSION" || true
              fi

              # Check if release exists and delete it
              EXISTING_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_PUSH_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$NEW_VERSION" | \
                grep -o '"id":[0-9]*' | cut -d: -f2 || echo "")

              if [[ -n "$EXISTING_RELEASE" && "$EXISTING_RELEASE" != "null" ]]; then
                echo "Deleting existing release for v$NEW_VERSION (ID: $EXISTING_RELEASE)"
                curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GH_PUSH_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/$EXISTING_RELEASE"
              fi
            else
              # Only validate if it's a different version
              CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
              CURRENT_MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
              CURRENT_PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
              NEW_MAJOR=$(echo $NEW_VERSION | cut -d. -f1)
              NEW_MINOR=$(echo $NEW_VERSION | cut -d. -f2)
              NEW_PATCH=$(echo $NEW_VERSION | cut -d. -f3)

              if [[ $NEW_MAJOR -lt $CURRENT_MAJOR ||
                    ($NEW_MAJOR -eq $CURRENT_MAJOR && $NEW_MINOR -lt $CURRENT_MINOR) ||
                    ($NEW_MAJOR -eq $CURRENT_MAJOR && $NEW_MINOR -eq $CURRENT_MINOR && $NEW_PATCH -lt $CURRENT_PATCH) ]]; then
                echo "Error: Provided version ($NEW_VERSION) is less than current version ($CURRENT_VERSION)"
                exit 1
              fi
            fi
            echo "Used provided version"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $NEW_VERSION"

      - name: Update Cargo.toml files in all crates
        run: |
          # Update version in all crates
          for crate_toml in crates/*/Cargo.toml; do
            echo "Updating version in $crate_toml"
            sed -i "s/^version = \"${{ steps.cargo_version.outputs.current_version }}\"/version = \"${{ steps.release_version.outputs.new_version }}\"/" "$crate_toml"
            cat "$crate_toml" | grep "^version = "
          done

          # Update Cargo.lock for the entire workspace
          cargo update

      - name: Commit and push version update
        run: |
          # Stage all changes
          git add crates/*/Cargo.toml Cargo.lock

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No version changes to commit (version already up to date)"
          else
            git commit -m "Bump version to ${{ steps.release_version.outputs.new_version }}"
            git push
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        with:
          tag_name: v${{ steps.release_version.outputs.new_version }}
          name: Release v${{ steps.release_version.outputs.new_version }}
          draft: true
          prerelease: false

      - name: Output Release URL
        run: echo "Created release at ${{ steps.create_release.outputs.url }}"
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_url: ${{ steps.create_release.outputs.url }}
      new_version: ${{ steps.release_version.outputs.new_version }}

  build:
    needs: prepare-version
    strategy:
      fail-fast: false  # Don't cancel other builds if one fails
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            extension: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            extension: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            pkg-config

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          mkdir -p release
          cp "target/${{ matrix.target }}/release/code-assistant${{ matrix.extension }}" release/
          cd release

          # Windows runner has no 'zip' installed
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # PowerShell Compress-Archive instead of zip
            powershell -Command "Compress-Archive -Path ./code-assistant${{ matrix.extension }} -DestinationPath ./code-assistant-${{ matrix.name }}.zip"
          else
            # Linux/macOS: standard zip
            zip code-assistant-${{ matrix.name }}.zip "code-assistant${{ matrix.extension }}"
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-version.outputs.new_version }}
          files: release/code-assistant-${{ matrix.name }}.zip

  finalize-release:
    needs: [prepare-version, build]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-version.outputs.new_version }}
          draft: false
